{"version":3,"sources":["../api/buildSchedule.js"],"names":["CSV_NAME","readFile","path","fileContent","Promise","resolve","fs","readFileSync","encoding","dias","s","t","q","i","x","convertToObject","line","split","sala","disciplina_turma","professor","categoria","periodo_composto","horario","turma","pop","disciplina","slice","periodo_ppc_antigo","periodo_ppc_novo","dia","hora","substring","buildSchedule","then","content","contentAsStringArray","shift","horarios","map"],"mappings":";;;;;;;AAAA;;;;;;;;;;;;;;;;AAEA,IAAMA,QAAQ,GAAG,kBAAjB;AAEA;;;;;AAIA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAASC,IAAT,EAAe;AAC5B,MAAIC,WAAJ;AACA,SAAO,IAAIC,OAAJ,CAAY,UAASC,OAAT,EAAkB;AACjCF,IAAAA,WAAW,GAAGG,eAAGC,YAAH,CAAgBL,IAAhB,EAAsB;AAACM,MAAAA,QAAQ,EAAE;AAAX,KAAtB,CAAd;AACAH,IAAAA,OAAO,CAACF,WAAD,CAAP;AACH,GAHM,CAAP;AAIH,CAND;;AAQA,IAAMM,IAAI,GAAG;AACXC,EAAAA,CAAC,EAAE,SADQ;AAEXC,EAAAA,CAAC,EAAE,OAFQ;AAGXC,EAAAA,CAAC,EAAE,QAHQ;AAIXC,EAAAA,CAAC,EAAE,QAJQ;AAKXC,EAAAA,CAAC,EAAE;AAGL;;;;;AARa,CAAb;;AAYA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,IAAD,EAAU;AAAA,oBACkDA,IAAI,CAACC,KAAL,CAAW,GAAX,CADlD;AAAA;AAAA,MAC1BC,IAD0B;AAAA,MACpBC,gBADoB;AAAA,MACFC,SADE;AAAA,MACSC,SADT;AAAA,MACoBC,gBADpB;AAAA,MACsCC,OADtC;;AAEhC,MAAIC,KAAK,GAAGL,gBAAgB,CAACF,KAAjB,CAAuB,GAAvB,EAA4BQ,GAA5B,EAAZ;AACA,MAAIC,UAAU,GAAGP,gBAAgB,CAACQ,KAAjB,CAAuB,CAAvB,EAA0B,CAAC,CAA3B,CAAjB;;AAHgC,8BAIeL,gBAAgB,CAACL,KAAjB,CAAuB,GAAvB,CAJf;AAAA;AAAA,MAI1BW,kBAJ0B;AAAA,MAINC,gBAJM;;AAKhC,MAAIC,GAAG,GAAGP,OAAO,CAAC,CAAD,CAAjB;AACA,MAAIQ,IAAI,GAAGR,OAAO,CAACS,SAAR,CAAkB,CAAlB,CAAX;AAEA,SAAO;AACLd,IAAAA,IAAI,EAAJA,IADK;AAELQ,IAAAA,UAAU,EAAVA,UAFK;AAGLF,IAAAA,KAAK,EAALA,KAHK;AAILJ,IAAAA,SAAS,EAATA,SAJK;AAKLC,IAAAA,SAAS,EAATA,SALK;AAMLO,IAAAA,kBAAkB,EAAlBA,kBANK;AAOLC,IAAAA,gBAAgB,EAAhBA,gBAPK;AAQLN,IAAAA,OAAO,EAAE;AACPO,MAAAA,GAAG,EAAErB,IAAI,CAACqB,GAAD,CADF;AAEPC,MAAAA,IAAI,EAAJA;AAFO;AARJ,GAAP;AAaD,CArBD;AAuBA;;;;;;SAI8BE,a;;;;;;;0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAGPhC,QAAQ,eAAQD,QAAR,EAAR,CAA4BkC,IAA5B,CAAiC,UAAAC,OAAO,EAAI;AAChD,kBAAIC,oBAAoB,GAAGD,OAAO,CAAClB,KAAR,CAAc,MAAd,CAA3B;AACAmB,cAAAA,oBAAoB,CAACC,KAArB,GAFgD,CAElB;;AAC9BC,cAAAA,QAAQ,GAAGF,oBAAoB,CAACG,GAArB,CAAyBxB,eAAzB,CAAX;AACD,aAJK,CAHO;;AAAA;AAAA,6CASNuB,QATM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import fs from 'fs';\n\nconst CSV_NAME = 'horario20191.csv';\n\n/**\n * Lê um arquivo .csv e o retorna como uma promise que possui a string com o conteudo do csv não formatado\n * @param {string} path Caminho para o arquivo .csv\n */\nconst readFile = function(path) {\n    var fileContent;\n    return new Promise(function(resolve) {\n        fileContent = fs.readFileSync(path, {encoding: 'utf8'});\n        resolve(fileContent);\n    });\n}\n\nconst dias = {\n  s: 'segunda',\n  t: 'terca',\n  q: 'quarta',\n  i: 'quinta',\n  x: 'sexta'\n}\n\n/**\n * Converte uma linha não formatada de um arquivo .csv em um objeto especifico (horario)\n * @param {string} line Uma linha de um arquivo csv \n */\nconst convertToObject = (line) => {\n  var [ sala, disciplina_turma, professor, categoria, periodo_composto, horario ] = line.split(\",\");\n  var turma = disciplina_turma.split('-').pop();\n  var disciplina = disciplina_turma.slice(0, -3);\n  var [ periodo_ppc_antigo, periodo_ppc_novo ] = periodo_composto.split(';');\n  var dia = horario[0];\n  var hora = horario.substring(1);\n  \n  return {\n    sala,\n    disciplina,\n    turma,\n    professor,\n    categoria,\n    periodo_ppc_antigo,\n    periodo_ppc_novo,\n    horario: {\n      dia: dias[dia],\n      hora\n    }\n  }\n}\n\n/**\n * Carrega todos os horários a partir do .csv com nome especificado em CSV_NAME\n * Retorna uma promise, contendo os horarios.\n */\nexport default async function buildSchedule() {\n  var horarios;\n\n  await readFile(`csv/${CSV_NAME}`).then(content => {\n    var contentAsStringArray = content.split('\\r\\n');\n    contentAsStringArray.shift(); // Remove header (first element)\n    horarios = contentAsStringArray.map(convertToObject);\n  })\n\n  return horarios;\n}\n"],"file":"buildSchedule.js"}